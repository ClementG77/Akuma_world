    //Blockchain implementation

    const abi = [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[],"name":"FREE_MINT_MAX_QTY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_QTY_PER_TX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_QTY_PER_TX_WL","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PAID_MINT_MAX_QTY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOTAL_MAX_QTY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WL_PRICE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_mintQty","type":"uint256"}],"name":"WLmint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"addressMintedBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"artistAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"communityAdress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"creator1Address","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"creator2Address","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"creator3Address","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"receivers","type":"address[]"},{"internalType":"uint256","name":"_mintQty","type":"uint256"}],"name":"gift","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"legendaryAdress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_mintQty","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"URI","type":"string"}],"name":"setBaseURI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"proxyAddress","type":"address"}],"name":"setProxyRegistryAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasuryAdress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"_users","type":"address[]"}],"name":"unWhitelistUsers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"_users","type":"address[]"}],"name":"whitelistUsers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"whitelistedAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdrawAll","outputs":[],"stateMutability":"nonpayable","type":"function"}];
    let Qte = 1;
    let WL_val = 0.05;
    let val = 0.075;
    let maxValueBtn = 0;
    let totalNFTInput = document.querySelector('input[type="text"][id="totalNFT"]')
    let totalETHSpan = document.querySelector('#totalETH');
    totalETHSpan.innerText = Qte * val;
    totalNFTInput.addEventListener('input', updateValue);
    let totalNFTInputWL = document.querySelector('input[type="text"][id="totalNFTWL"]')
    let totalETHSpanWL = document.querySelector('#totalETHWL');
    totalETHSpanWL.innerText = Qte * WL_val;
    totalNFTInputWL.addEventListener('input', updateValueWL);

    function updateValue(){
        Qte = Number(totalNFTInput.value);
        totalETHSpan.innerText = (Qte * val).toFixed(2);
   }

   function updateValueWL(){
    Qte = Number(totalNFTInputWL.value);
    totalETHSpanWL.innerText = (Qte * WL_val).toFixed(2);
}
   
    function Increment() {
        if(Number(totalNFTInput.value) < maxValueBtn){
            Qte+=1
            totalNFTInput.value = Number(totalNFTInput.value) + 1;
            totalETHSpan.innerText = (totalNFTInput.value * val).toFixed(2);
        }
    }
    function Decrement() {
        if (Number(totalNFTInput.value) > 1) {
            Qte-=1
            totalNFTInput.value = Number(totalNFTInput.value) - 1;
            totalETHSpan.innerText = (totalNFTInput.value * val).toFixed(2);
        }
    
    }
    function IncrementWL() {
        if(Number(totalNFTInputWL.value) < maxValueBtn){
            Qte+=1
            totalNFTInputWL.value = Number(totalNFTInputWL.value) + 1;
            totalETHSpanWL.innerText = (totalNFTInputWL.value * WL_val).toFixed(2);
        }
    }
    function DecrementWL() {
        if (Number(totalNFTInputWL.value) > 1) {
            Qte-=1
            totalNFTInputWL.value = Number(totalNFTInputWL.value) - 1;
            totalETHSpanWL.innerText = (totalNFTInputWL.value * WL_val).toFixed(2);
        }
    
    }

    async function connectWallet() {
        // Check if MetaMask is installed on user's browser
    if(window.ethereum) {
        window.web3 = new Web3(window.ethereum);
        window.ethereum.enable();  
        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
        const chainId = await window.ethereum.request({ method: 'eth_chainId'});
        // Check if user is connected to Mainnet
        if(chainId != '0x1') {
            alert("Please connect to Mainnet");
        } else {
            let wallet = accounts[0];
            let member = await isWLmember(wallet);
            changeMember(member);
        }
  } else {
    alert("Please install Mask");
  }
    }

async function isWLmember(wallet){
    const web3 = new Web3(Web3.givenProvider);
    await ethereum.enable();
    const AkumaContract = new web3.eth.Contract(abi, "0x5Cf29612Fb63C49831E575f8CAa74c20cC887a59");
    let member = await AkumaContract.methods.whitelistedAddresses(wallet).call({
        from: wallet,
    });
    return member;
}
function changeMember(member){
    document.getElementById("connect").className = "d-none flex-column flex-grow-1";
    document.getElementById("myGIF").style.minWidth = "40%";
    if (member == true) {
        document.getElementById("WL").className = "d-flex flex-column flex-grow-1";
        maxValueBtn = 4;
        document.getElementById('WL-max').innerHTML=maxValueBtn;
    }
    else{
        document.getElementById("nonWL").className = "d-flex flex-column flex-grow-1";
        maxValueBtn = 2;
        document.getElementById('nonWL-max').innerHTML=maxValueBtn;
    }
}

const mintNft = async () => {
    try {
      const { ethereum } = window;
      const accounts = await ethereum.request({ method: "eth_accounts" });

      if (ethereum) {
        const web3 = new Web3(Web3.givenProvider);
        await ethereum.enable();
        let wallet = accounts[0];
        const AkumaContract = new web3.eth.Contract(abi, "0x5Cf29612Fb63C49831E575f8CAa74c20cC887a59");
        let member = await isWLmember(wallet);
        if (member == true) {
                let countFinal = parseInt(`${Qte}000000000000000000`, 10)
                let nftTxn = await AkumaContract.methods.WLmint(Qte).send({
                from: accounts[0],
                value: countFinal * WL_val
          });
        }
        else{
            let countFinal = parseInt(`${Qte}000000000000000000`, 10)
            let nftTxn = await AkumaContract.methods.mint(Qte).send({
            from: accounts[0],
            value: countFinal * val
          });
        }
      } else {
        console.log("Ethereum does not exist");
      }
    } catch (err) {
      console.log(err);
    }
  }

  // End blockchain implementation


window.innerWidth < 768 && [].slice.call(document.querySelectorAll("[data-bss-disabled-mobile]")).forEach((function(e) {
    e.classList.remove("animated"), e.removeAttribute("data-bss-hover-animate"), e.removeAttribute("data-aos")
})), document.addEventListener("DOMContentLoaded", (function() {
    AOS.init()
}), !1),
function() {
    "use strict";
    var e = document.querySelector("#mainNav");
    if (e) {
        var t = e.querySelector(".navbar-collapse");
        if (t) {
            var n = new bootstrap.Collapse(t, {
                    toggle: !1
                }),
                o = t.querySelectorAll("a");
            for (var a of o) a.addEventListener("click", (function(e) {
                n.hide()
            }))
        }
        var i = function() {
            (void 0 !== window.pageYOffset ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop) > 100 ? e.classList.add("navbar-shrink") : e.classList.remove("navbar-shrink")
        };
        i(), document.addEventListener("scroll", i)
    }
}();
